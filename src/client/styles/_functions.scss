@function map-deep-get($map, $keys...) {
    $aux: map-get($map, nth($keys, 1));

    @each $key in $keys {
        $aux: map-get($map, $key);
    }

    @return $aux;
}

@function to-number($str) {
    @if type-of($str) == "number" {
        @return $str;
    } @else if type-of($str) != "string" {
        $_: log("Value for `to-number` should be a number or a string.");
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($str, 1, 1) == "-";
    $numbers: (
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9,
    );

    @for $i from if($minus, 2, 1) through str-length($str) {
        $character: str-slice($str, $i, $i);

        @if not(index(map-keys($numbers), $character) or $character == ".") {
            @return to-length(
                if($minus, -$result, $result),
                str-slice($str, $i)
            );
        }

        @if $character == "." {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

@function index-of($target, $list) {
    $max-index: length($list);
    $i: 1;

    @while $i != $max-index {
        $item: nth($list, $i);

        @if $item == $target {
            @return $i;
        }

        $i: $i + 1;
    }

    @return -1;
}

@function array-contains($item, $list) {
    $index: index-of($item, $list);
    @return $index != -1;
}
